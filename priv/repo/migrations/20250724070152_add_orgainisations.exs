defmodule Anvil.Repo.Migrations.AddOrgainisations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:projects) do
      remove :repository
    end

    drop constraint(:projects, "projects_owner_id_fkey")

    drop_if_exists unique_index(:projects, [:repository],
                     name: "projects_unique_repository_index"
                   )

    drop_if_exists unique_index(:projects, [:owner_id, :slug],
                     name: "projects_unique_slug_per_user_index"
                   )

    rename table(:projects), :owner_id, to: :organisation_id

    create table(:organisations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:projects) do
      modify :organisation_id,
             references(:organisations,
               column: :id,
               name: "projects_organisation_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:projects, [:organisation_id, :slug],
             name: "projects_unique_slug_per_org_index"
           )

    alter table(:organisations) do
      add :name, :text, null: false
      add :slug, :text, null: false
      add :description, :text
      add :personal?, :boolean, null: false, default: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:organisations, [:name], name: "organisations_unique_name_index")

    create unique_index(:organisations, [:slug], name: "organisations_unique_slug_index")

    create table(:organisation_memberships, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :role, :text, null: false, default: "member"

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :organisation_id,
          references(:organisations,
            column: :id,
            name: "organisation_memberships_organisation_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "organisation_memberships_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false
    end

    create unique_index(:organisation_memberships, [:user_id, :organisation_id],
             name: "organisation_memberships_unique_user_org_index"
           )
  end

  def down do
    drop_if_exists unique_index(:organisation_memberships, [:user_id, :organisation_id],
                     name: "organisation_memberships_unique_user_org_index"
                   )

    drop constraint(:organisation_memberships, "organisation_memberships_organisation_id_fkey")

    drop constraint(:organisation_memberships, "organisation_memberships_user_id_fkey")

    drop table(:organisation_memberships)

    drop_if_exists unique_index(:organisations, [:slug], name: "organisations_unique_slug_index")

    drop_if_exists unique_index(:organisations, [:name], name: "organisations_unique_name_index")

    alter table(:organisations) do
      remove :updated_at
      remove :created_at
      remove :personal?
      remove :description
      remove :slug
      remove :name
    end

    drop_if_exists unique_index(:projects, [:organisation_id, :slug],
                     name: "projects_unique_slug_per_org_index"
                   )

    drop constraint(:projects, "projects_organisation_id_fkey")

    alter table(:projects) do
      modify :owner_id,
             references(:users,
               column: :id,
               name: "projects_owner_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    drop table(:organisations)

    rename table(:projects), :organisation_id, to: :owner_id

    create unique_index(:projects, [:owner_id, :slug],
             name: "projects_unique_slug_per_user_index"
           )

    create unique_index(:projects, [:repository], name: "projects_unique_repository_index")

    alter table(:projects) do
      add :repository, :text, null: false
    end
  end
end
