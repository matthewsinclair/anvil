defmodule Anvil.Repo.Migrations.InitialSetup do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:prompts, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :slug, :text, null: false
      add :template, :text, null: false
      add :parameters, {:array, :map}, default: []
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :prompt_set_id, :uuid, null: false
    end

    create table(:prompt_sets, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:prompts) do
      modify :prompt_set_id,
             references(:prompt_sets,
               column: :id,
               name: "prompts_prompt_set_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:prompts, [:prompt_set_id, :slug],
             name: "prompts_unique_slug_per_set_index"
           )

    alter table(:prompt_sets) do
      add :name, :text, null: false
      add :slug, :text, null: false
      add :version, :text, null: false
      add :metadata, :map, default: %{}
      add :dependencies, {:array, :map}, default: []
      add :published_at, :utc_datetime
      add :edit_mode, :text, default: "review"
      add :approval_token_hash, :text

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :project_id, :uuid, null: false
    end

    create table(:prompt_set_versions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :version_number, :text, null: false
      add :changelog, :text
      add :snapshot, :map, null: false
      add :published_at, :utc_datetime

      add :published_by_id,
          references(:users,
            column: :id,
            name: "prompt_set_versions_published_by_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :prompt_set_id,
          references(:prompt_sets,
            column: :id,
            name: "prompt_set_versions_prompt_set_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:prompt_set_versions, [:prompt_set_id, :version_number],
             name: "prompt_set_versions_unique_version_index"
           )

    create table(:projects, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:prompt_sets) do
      modify :project_id,
             references(:projects,
               column: :id,
               name: "prompt_sets_project_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:prompt_sets, [:project_id, :slug, :version],
             name: "prompt_sets_unique_version_per_project_index"
           )

    alter table(:projects) do
      add :name, :text, null: false
      add :slug, :text, null: false
      add :description, :text
      add :repository, :text, null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :owner_id,
          references(:users,
            column: :id,
            name: "projects_owner_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:projects, [:repository], name: "projects_unique_repository_index")

    create unique_index(:projects, [:owner_id, :slug],
             name: "projects_unique_slug_per_user_index"
           )

    create table(:bundles, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :repository, :text, null: false
      add :version, :text, null: false
      add :description, :text
      add :manifest, :map, null: false
      add :checksum, :text, null: false
      add :size_bytes, :bigint, null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :created_by_id,
          references(:users,
            column: :id,
            name: "bundles_created_by_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:bundles, [:checksum], name: "bundles_by_checksum_index")

    create unique_index(:bundles, [:repository, :name, :version],
             name: "bundles_unique_bundle_index"
           )

    create table(:bundle_imports, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :status, :text, default: "pending"
      add :error_message, :text
      add :import_results, :map

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :bundle_id,
          references(:bundles,
            column: :id,
            name: "bundle_imports_bundle_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :project_id,
          references(:projects,
            column: :id,
            name: "bundle_imports_project_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :imported_by_id,
          references(:users,
            column: :id,
            name: "bundle_imports_imported_by_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create table(:bundle_exports, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :status, :text, default: "pending"
      add :error_message, :text
      add :file_path, :text

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :bundle_id,
          references(:bundles,
            column: :id,
            name: "bundle_exports_bundle_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :prompt_set_id,
          references(:prompt_sets,
            column: :id,
            name: "bundle_exports_prompt_set_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :exported_by_id,
          references(:users,
            column: :id,
            name: "bundle_exports_exported_by_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end
  end

  def down do
    drop constraint(:bundle_exports, "bundle_exports_bundle_id_fkey")

    drop constraint(:bundle_exports, "bundle_exports_prompt_set_id_fkey")

    drop constraint(:bundle_exports, "bundle_exports_exported_by_id_fkey")

    drop table(:bundle_exports)

    drop constraint(:bundle_imports, "bundle_imports_bundle_id_fkey")

    drop constraint(:bundle_imports, "bundle_imports_project_id_fkey")

    drop constraint(:bundle_imports, "bundle_imports_imported_by_id_fkey")

    drop table(:bundle_imports)

    drop_if_exists unique_index(:bundles, [:repository, :name, :version],
                     name: "bundles_unique_bundle_index"
                   )

    drop_if_exists unique_index(:bundles, [:checksum], name: "bundles_by_checksum_index")

    drop constraint(:bundles, "bundles_created_by_id_fkey")

    drop table(:bundles)

    drop_if_exists unique_index(:projects, [:owner_id, :slug],
                     name: "projects_unique_slug_per_user_index"
                   )

    drop_if_exists unique_index(:projects, [:repository],
                     name: "projects_unique_repository_index"
                   )

    drop constraint(:projects, "projects_owner_id_fkey")

    alter table(:projects) do
      remove :owner_id
      remove :updated_at
      remove :created_at
      remove :repository
      remove :description
      remove :slug
      remove :name
    end

    drop_if_exists unique_index(:prompt_sets, [:project_id, :slug, :version],
                     name: "prompt_sets_unique_version_per_project_index"
                   )

    drop constraint(:prompt_sets, "prompt_sets_project_id_fkey")

    alter table(:prompt_sets) do
      modify :project_id, :uuid
    end

    drop table(:projects)

    drop_if_exists unique_index(:prompt_set_versions, [:prompt_set_id, :version_number],
                     name: "prompt_set_versions_unique_version_index"
                   )

    drop constraint(:prompt_set_versions, "prompt_set_versions_published_by_id_fkey")

    drop constraint(:prompt_set_versions, "prompt_set_versions_prompt_set_id_fkey")

    drop table(:prompt_set_versions)

    alter table(:prompt_sets) do
      remove :project_id
      remove :updated_at
      remove :created_at
      remove :approval_token_hash
      remove :edit_mode
      remove :published_at
      remove :dependencies
      remove :metadata
      remove :version
      remove :slug
      remove :name
    end

    drop_if_exists unique_index(:prompts, [:prompt_set_id, :slug],
                     name: "prompts_unique_slug_per_set_index"
                   )

    drop constraint(:prompts, "prompts_prompt_set_id_fkey")

    alter table(:prompts) do
      modify :prompt_set_id, :uuid
    end

    drop table(:prompt_sets)

    drop table(:prompts)
  end
end
